"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,_toPropertyKey(r.key),r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_setPrototypeOf(e,t)}function _createSuper(n){var r=_isNativeReflectConstruct();return function(){var e,t=_getPrototypeOf(n);return _possibleConstructorReturn(this,r?(e=_getPrototypeOf(this).constructor,Reflect.construct(t,arguments,e)):t.apply(this,arguments))}}function _possibleConstructorReturn(e,t){if(t&&("object"===_typeof(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(e)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _wrapNativeSuper(e){var n="function"==typeof Map?new Map:void 0;return(_wrapNativeSuper=function(e){if(null===e||!_isNativeFunction(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(e))return n.get(e);n.set(e,t)}function t(){return _construct(e,arguments,_getPrototypeOf(this).constructor)}return t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(t,e)})(e)}function _construct(e,t,n){return(_construct=_isNativeReflectConstruct()?Reflect.construct.bind():function(e,t,n){var r=[null];r.push.apply(r,t);t=new(Function.bind.apply(e,r));return n&&_setPrototypeOf(t,n.prototype),t}).apply(null,arguments)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}function _isNativeFunction(t){try{return-1!==Function.toString.call(t).indexOf("[native code]")}catch(e){return"function"==typeof t}}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _defineProperty(e,t,n){return(t=_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _toPropertyKey(e){e=_toPrimitive(e,"string");return"symbol"===_typeof(e)?e:String(e)}function _toPrimitive(e,t){if("object"!==_typeof(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0===n)return("string"===t?String:Number)(e);n=n.call(e,t||"default");if("object"!==_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}!function r(o,i,s){function c(t,e){if(!i[t]){if(!o[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(u)return u(t,!0);throw(e=new Error("Cannot find module '"+t+"'")).code="MODULE_NOT_FOUND",e}n=i[t]={exports:{}},o[t][0].call(n.exports,function(e){return c(o[t][1][e]||e)},n,n.exports,r,o,i,s)}return i[t].exports}for(var u="function"==typeof require&&require,e=0;e<s.length;e++)c(s[e]);return c}({1:[function(e,t,n){var r=function(){_inherits(i,_wrapNativeSuper(HTMLElement));var o=_createSuper(i);function i(){var e;_classCallCheck(this,i);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return _defineProperty(_assertThisInitialized(e=o.call.apply(o,[this].concat(n))),"prevMenu",null),e}return _createClass(i,[{key:"connectedCallback",value:function(){this.burgerIcon=this.querySelector(".nav__icon--burger"),this.closeIcon=this.querySelector(".nav__icon--close"),this.shopButton=this.querySelector(".nav__link--Shop"),this.closeIconDesktop=this.querySelector(".nav__icon--close--desktop"),this.desktopWrapper=this.querySelector(".sidebar-nav-overlay--desktop"),this.links=this.querySelectorAll(".js-sidebar-nav__link"),this.backButtons=this.querySelectorAll(".js-secondary-menu__top-bar--back"),this.closeButtons=document.querySelectorAll(".js-secondary-menu__top-bar--close"),this.linksDesktop=document.querySelectorAll(".js-sidebar-nav-desktop__link"),this.addEventListeners()}},{key:"disconnectedCallback",value:function(){this.removeEventListeners()}},{key:"addEventListeners",value:function(){var n=this;this.toggleIconsClasses=function(){n.querySelector(".sidebar-nav-wrapper--mobile").classList.toggle("nav-active"),n.querySelectorAll(".nav__icon").forEach(function(e){return e.classList.toggle("nav__icon--js-hidden")})},this.openNav=function(){n.querySelector("#sidebar-menu-desktop").style.left="0",n.querySelector("#sidebar-nav-overlay--desktop").style.display="block"},this.closeNav=function(){n.querySelector("#sidebar-menu-desktop").style.left="-100%",n.querySelector("#sidebar-nav-overlay--desktop").style.display="none",n.querySelector(".js-sidebar-nav-wrapper--desktop").classList.remove("nav-active"),n.prevMenu.nextElementSibling.classList.remove("secondary-menu-desktop-open")},this.burgerIcon.addEventListener("click",function(e){e.preventDefault(),n.toggleIconsClasses(),n.querySelector(".nav__icon--close").classList.toggle("close-active")}),this.closeIcon.addEventListener("click",function(e){e.preventDefault(),n.toggleIconsClasses()}),this.shopButton.addEventListener("click",function(e){e.preventDefault(),n.openNav(),n.querySelector(".js-sidebar-nav-wrapper--desktop").classList.toggle("nav-active")}),this.closeIconDesktop.addEventListener("click",function(e){e.preventDefault(),n.closeNav()}),this.desktopWrapper.addEventListener("click",function(){n.closeNav()}),this.links.forEach(function(t){return t.addEventListener("click",function(e){e.preventDefault(),t.nextElementSibling.classList.toggle("secondary-menu-open")})}),this.backButtons.forEach(function(e){return e.addEventListener("click",function(e){e.preventDefault(),e.stopPropagation(),document.querySelector(".secondary-menu-open").classList.toggle("secondary-menu-open")})}),this.closeButtons.forEach(function(e){return e.addEventListener("click",function(e){e.preventDefault(),n.toggleIconsClasses()})}),this.linksDesktop.forEach(function(t){t.addEventListener("click",function(e){e.preventDefault(),null!==n.prevMenu&&(n.prevMenu.nextElementSibling.classList.remove("secondary-menu-desktop-open"),n.prevMenu=null),t.nextElementSibling.classList.add("secondary-menu-desktop-open"),n.prevMenu=t})})}},{key:"removeEventListeners",value:function(){var n=this;this.burgerIcon.removeEventListener("click",this.toggleIconsClasses),this.closeIcon.removeEventListener("click",this.toggleIconsClasses),this.shopButton.removeEventListener("click",this.openNav),this.closeIconDesktop.removeEventListener("click",this.closeNav),this.desktopWrapper.removeEventListener("click",this.closeNav),this.links.forEach(function(t){return t.removeEventListener("click",function(e){e.preventDefault(),t.nextElementSibling.classList.toggle("secondary-menu-open")})}),this.backButtons.forEach(function(e){return e.removeEventListener("click",function(e){e.preventDefault(),e.stopPropagation(),document.querySelector(".secondary-menu-open").classList.toggle("secondary-menu-open")})}),this.closeButtons.forEach(function(e){return e.removeEventListener("click",function(e){e.preventDefault(),n.toggleIconsClasses()})}),this.linksDesktop.forEach(function(t){t.removeEventListener("click",function(e){e.preventDefault(),null!==n.prevMenu&&(n.prevMenu.nextElementSibling.classList.remove("secondary-menu-desktop-open"),n.prevMenu=null),t.nextElementSibling.classList.add("secondary-menu-desktop-open"),n.prevMenu=t})})}}]),i}();customElements.define("sidebar-toggle",r)},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvc2VjdGlvbi1oZWFkZXIuanMiLCJzZWN0aW9uLWhlYWRlci5qcyJdLCJuYW1lcyI6WyJyIiwiZSIsIm4iLCJ0IiwibyIsImkiLCJmIiwiYyIsInJlcXVpcmUiLCJ1IiwiYSIsIkVycm9yIiwiY29kZSIsInAiLCJleHBvcnRzIiwiY2FsbCIsImxlbmd0aCIsIjEiLCJtb2R1bGUiLCJTaWRlYmFyVG9nZ2xlIiwiX2luaGVyaXRzIiwiX3dyYXBOYXRpdmVTdXBlciIsIkhUTUxFbGVtZW50IiwiX3N1cGVyIiwiX2NyZWF0ZVN1cGVyIiwiX3RoaXMiLCJfY2xhc3NDYWxsQ2hlY2siLCJ0aGlzIiwiX2xlbiIsImFyZ3VtZW50cyIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJfZGVmaW5lUHJvcGVydHkiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiYXBwbHkiLCJjb25jYXQiLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsImJ1cmdlckljb24iLCJxdWVyeVNlbGVjdG9yIiwiY2xvc2VJY29uIiwic2hvcEJ1dHRvbiIsImNsb3NlSWNvbkRlc2t0b3AiLCJkZXNrdG9wV3JhcHBlciIsImxpbmtzIiwicXVlcnlTZWxlY3RvckFsbCIsImJhY2tCdXR0b25zIiwiY2xvc2VCdXR0b25zIiwiZG9jdW1lbnQiLCJsaW5rc0Rlc2t0b3AiLCJhZGRFdmVudExpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXJzIiwiX3RoaXMyIiwidG9nZ2xlSWNvbnNDbGFzc2VzIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwiZm9yRWFjaCIsImljb24iLCJvcGVuTmF2Iiwic3R5bGUiLCJsZWZ0IiwiZGlzcGxheSIsImNsb3NlTmF2IiwicmVtb3ZlIiwicHJldk1lbnUiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImxpbmsiLCJiYWNrQnV0dG9uIiwic3RvcFByb3BhZ2F0aW9uIiwiY2xvc2VCdXR0b24iLCJsaW5rRGVza3RvcCIsImFkZCIsIl90aGlzMyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSJdLCJtYXBwaW5ncyI6InNqSEFBQSxDQUFBLFNBQUFBLEVBQUFDLEVBQUFDLEVBQUFDLEdBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FBQSxHQUFBLENBQUFKLEVBQUFHLEdBQUEsQ0FBQSxHQUFBLENBQUFKLEVBQUFJLEdBQUEsQ0FBQSxJQUFBRSxFQUFBLFlBQUEsT0FBQUMsU0FBQUEsUUFBQSxHQUFBLENBQUFGLEdBQUFDLEVBQUEsT0FBQUEsRUFBQUYsRUFBQSxDQUFBLENBQUEsRUFBQSxHQUFBSSxFQUFBLE9BQUFBLEVBQUFKLEVBQUEsQ0FBQSxDQUFBLEVBQUEsTUFBQUssRUFBQSxJQUFBQyxNQUFBLHVCQUFBTixFQUFBLEdBQUEsR0FBQU8sS0FBQSxtQkFBQUYsQ0FBQSxDQUFBRyxFQUFBWCxFQUFBRyxHQUFBLENBQUFTLFFBQUEsRUFBQSxFQUFBYixFQUFBSSxHQUFBLEdBQUFVLEtBQUFGLEVBQUFDLFFBQUEsU0FBQWQsR0FBQSxPQUFBSSxFQUFBSCxFQUFBSSxHQUFBLEdBQUFMLElBQUFBLENBQUEsQ0FBQSxFQUFBYSxFQUFBQSxFQUFBQyxRQUFBZCxFQUFBQyxFQUFBQyxFQUFBQyxDQUFBLENBQUEsQ0FBQSxPQUFBRCxFQUFBRyxHQUFBUyxPQUFBLENBQUEsSUFBQSxJQUFBTCxFQUFBLFlBQUEsT0FBQUQsU0FBQUEsUUFBQUgsRUFBQSxFQUFBQSxFQUFBRixFQUFBYSxPQUFBWCxDQUFBLEdBQUFELEVBQUFELEVBQUFFLEVBQUEsRUFBQSxPQUFBRCxDQUFBLEVBQUEsQ0FBQWEsRUFBQSxDQUFBLFNBQUFULEVBQUFVLEVBQUFKLEdDbUdBLElBRUFLLEVBQUEsV0FBQUMsVUFBQUQsRUEwS0FFLGlCQTFLQUMsV0FBQSxDQUFBLEVBQUEsSUFBQUMsRUFBQUMsYUFBQUwsQ0FBQSxFQUFBLFNB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YSxHQUFBLE9BQ0FBLEVBQUFPLG9CQUFBLFFBQUEsU0FBQVQsR0FDQUEsRUFBQUMsZUFBQSxFQUNBQyxFQUFBSixtQkFBQVgsVUFBQUMsT0FBQSxxQkFBQSxDQUNBLENBQUEsQ0FBQSxDQUNBLEVBRUE5QixLQUFBcUIsWUFBQVUsUUFBQSxTQUFBYyxHQUFBLE9BQ0FBLEVBQUFNLG9CQUFBLFFBQUEsU0FBQVQsR0FDQUEsRUFBQUMsZUFBQSxFQUNBRCxFQUFBSSxnQkFBQSxFQUNBdkIsU0FDQVQsY0FBQSxzQkFBQSxFQUNBZSxVQUFBQyxPQUFBLHFCQUFBLENBQ0EsQ0FBQSxDQUFBLENBQ0EsRUFFQTlCLEtBQUFzQixhQUFBUyxRQUFBLFNBQUFnQixHQUFBLE9BQ0FBLEVBQUFJLG9CQUFBLFFBQUEsU0FBQVQsR0FDQUEsRUFBQUMsZUFBQSxFQUNBTyxFQUFBdEIsbUJBQUEsQ0FDQSxDQUFBLENBQUEsQ0FDQSxFQUVBNUIsS0FBQXdCLGFBQUFPLFFBQUEsU0FBQWlCLEdBQ0FBLEVBQUFHLG9CQUFBLFFBQUEsU0FBQVQsR0FDQUEsRUFBQUMsZUFBQSxFQUNBLE9BQUFPLEVBQUFYLFdBQ0FXLEVBQUFYLFNBQUFDLG1CQUFBWCxVQUFBUyxPQUNBLDZCQUNBLEVBQ0FZLEVBQUFYLFNBQUEsTUFFQVMsRUFBQVIsbUJBQUFYLFVBQUFvQixJQUNBLDZCQUNBLEVBQ0FDLEVBQUFYLFNBQUFTLENBQ0EsQ0FBQSxDQUNBLENBQUEsQ0FDQSxDQUFBLEVBQUEsRUFBQXhELENBQUEsRUExS0EsRUE2S0E0RCxlQUFBQyxPQUFBLGlCQUFBN0QsQ0FBQSxDQ0dBLEVBQUUsR0FBRyxFRE5MLEdBQUEsQ0FBQSxFQUFBIiwiZmlsZSI6InNlY3Rpb24taGVhZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIi8vIGNsYXNzIFNpZGViYXJUb2dnbGUgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4vLyAgIGNvbnN0cnVjdG9yKCkge1xuLy8gICAgIHN1cGVyKCk7XG5cbi8vICAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2lkZWJhci10b2dnbGUtdGVtcGxhdGVcIik7XG5cbi8vICAgICBjb25zdCBidXJnZXJJY29uID0gdGhpcy5xdWVyeVNlbGVjdG9yKFwiLm5hdl9faWNvbi0tYnVyZ2VyXCIpO1xuLy8gICAgIGNvbnN0IGNsb3NlSWNvbiA9IHRoaXMucXVlcnlTZWxlY3RvcihcIi5uYXZfX2ljb24tLWNsb3NlXCIpO1xuLy8gICAgIGNvbnN0IHNob3BCdXR0b24gPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIubmF2X19saW5rLS1TaG9wXCIpO1xuLy8gICAgIGNvbnN0IGNsb3NlSWNvbkRlc2t0b3AgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIubmF2X19pY29uLS1jbG9zZS0tZGVza3RvcFwiKTtcbi8vICAgICBjb25zdCBkZXNrdG9wV3JhcHBlciA9IHRoaXMucXVlcnlTZWxlY3RvcihcIi5zaWRlYmFyLW5hdi1vdmVybGF5LS1kZXNrdG9wXCIpO1xuLy8gICAgIGNvbnN0IGxpbmtzID0gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKFwiLmpzLXNpZGViYXItbmF2X19saW5rXCIpO1xuLy8gICAgIGNvbnN0IGJhY2tCdXR0b25zID0gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKFxuLy8gICAgICAgXCIuanMtc2Vjb25kYXJ5LW1lbnVfX3RvcC1iYXItLWJhY2tcIlxuLy8gICAgICk7XG4vLyAgICAgY29uc3QgY2xvc2VCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbi8vICAgICAgIFwiLmpzLXNlY29uZGFyeS1tZW51X190b3AtYmFyLS1jbG9zZVwiXG4vLyAgICAgKTtcblxuLy8gICAgIGNvbnN0IHRvZ2dsZUljb25zQ2xhc3NlcyA9ICgpID0+IHtcbi8vICAgICAgIHRoaXMucXVlcnlTZWxlY3RvcihcIi5zaWRlYmFyLW5hdi13cmFwcGVyLS1tb2JpbGVcIikuY2xhc3NMaXN0LnRvZ2dsZShcbi8vICAgICAgICAgXCJuYXYtYWN0aXZlXCJcbi8vICAgICAgICk7XG4vLyAgICAgICBjb25zdCBpY29ucyA9IHRoaXMucXVlcnlTZWxlY3RvckFsbChcIi5uYXZfX2ljb25cIik7XG4vLyAgICAgICBpY29ucy5mb3JFYWNoKChpY29uKSA9PiBpY29uLmNsYXNzTGlzdC50b2dnbGUoXCJuYXZfX2ljb24tLWpzLWhpZGRlblwiKSk7XG4vLyAgICAgfTtcblxuLy8gICAgIGNvbnN0IG9wZW5OYXYgPSAoKSA9PiB7XG4vLyAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIjc2lkZWJhci1tZW51LWRlc2t0b3BcIikuc3R5bGUubGVmdCA9IFwiMFwiO1xuLy8gICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKFwiI3NpZGViYXItbmF2LW92ZXJsYXktLWRlc2t0b3BcIikuc3R5bGUuZGlzcGxheSA9XG4vLyAgICAgICAgIFwiYmxvY2tcIjtcbi8vICAgICB9O1xuXG4vLyAgICAgY29uc3QgY2xvc2VOYXYgPSAoKSA9PiB7XG4vLyAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIjc2lkZWJhci1tZW51LWRlc2t0b3BcIikuc3R5bGUubGVmdCA9IFwiLTEwMCVcIjtcbi8vICAgICAgIHRoaXMucXVlcnlTZWxlY3RvcihcIiNzaWRlYmFyLW5hdi1vdmVybGF5LS1kZXNrdG9wXCIpLnN0eWxlLmRpc3BsYXkgPVxuLy8gICAgICAgICBcIm5vbmVcIjtcbi8vICAgICB9O1xuXG4vLyAgICAgYnVyZ2VySWNvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4vLyAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuLy8gICAgICAgdG9nZ2xlSWNvbnNDbGFzc2VzKCk7XG4vLyAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIubmF2X19pY29uLS1jbG9zZVwiKS5jbGFzc0xpc3QudG9nZ2xlKFwiY2xvc2UtYWN0aXZlXCIpO1xuLy8gICAgIH0pO1xuXG4vLyAgICAgY2xvc2VJY29uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbi8vICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4vLyAgICAgICB0b2dnbGVJY29uc0NsYXNzZXMoKTtcbi8vICAgICB9KTtcblxuLy8gICAgIHNob3BCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuLy8gICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbi8vICAgICAgIG9wZW5OYXYoKTtcbi8vICAgICAgIHRoaXMucXVlcnlTZWxlY3RvcihcIi5zaWRlYmFyLW5hdi13cmFwcGVyLS1kZXNrdG9wXCIpLmNsYXNzTGlzdC50b2dnbGUoXG4vLyAgICAgICAgIFwibmF2LWFjdGl2ZVwiXG4vLyAgICAgICApO1xuLy8gICAgIH0pO1xuXG4vLyAgICAgY2xvc2VJY29uRGVza3RvcC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4vLyAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuLy8gICAgICAgY2xvc2VOYXYoKTtcbi8vICAgICAgIHRoaXMucXVlcnlTZWxlY3RvcihcIi5zaWRlYmFyLW5hdi13cmFwcGVyLS1kZXNrdG9wXCIpLmNsYXNzTGlzdC50b2dnbGUoXG4vLyAgICAgICAgIFwibmF2LWFjdGl2ZVwiXG4vLyAgICAgICApO1xuLy8gICAgIH0pO1xuXG4vLyAgICAgZGVza3RvcFdyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbi8vICAgICAgIGNsb3NlTmF2KCk7XG4vLyAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIuc2lkZWJhci1uYXYtd3JhcHBlci0tZGVza3RvcFwiKS5jbGFzc0xpc3QucmVtb3ZlKFxuLy8gICAgICAgICBcIm5hdi1hY3RpdmVcIlxuLy8gICAgICAgKTtcbi8vICAgICB9KTtcblxuLy8gICAgIGxpbmtzLmZvckVhY2goKGxpbmspID0+XG4vLyAgICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbi8vICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbi8vICAgICAgICAgbGluay5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LnRvZ2dsZShcInNlY29uZGFyeS1tZW51LW9wZW5cIik7XG4vLyAgICAgICB9KVxuLy8gICAgICk7XG5cbi8vICAgICBiYWNrQnV0dG9ucy5mb3JFYWNoKChiYWNrQnV0dG9uKSA9PlxuLy8gICAgICAgYmFja0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4vLyAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4vLyAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuLy8gICAgICAgICBkb2N1bWVudFxuLy8gICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLnNlY29uZGFyeS1tZW51LW9wZW5cIilcbi8vICAgICAgICAgICAuY2xhc3NMaXN0LnRvZ2dsZShcInNlY29uZGFyeS1tZW51LW9wZW5cIik7XG4vLyAgICAgICB9KVxuLy8gICAgICk7XG5cbi8vICAgICBjbG9zZUJ1dHRvbnMuZm9yRWFjaCgoY2xvc2VCdXR0b24pID0+XG4vLyAgICAgICBjbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4vLyAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4vLyAgICAgICAgIHRvZ2dsZUljb25zQ2xhc3NlcygpO1xuLy8gICAgICAgfSlcbi8vICAgICApO1xuLy8gICB9XG4vLyB9XG5cbi8vIGN1c3RvbUVsZW1lbnRzLmRlZmluZShcInNpZGViYXItdG9nZ2xlXCIsIFNpZGViYXJUb2dnbGUpO1xuXG5jbGFzcyBTaWRlYmFyVG9nZ2xlIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBwcmV2TWVudSA9IG51bGw7XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5idXJnZXJJY29uID0gdGhpcy5xdWVyeVNlbGVjdG9yKFwiLm5hdl9faWNvbi0tYnVyZ2VyXCIpO1xuICAgIHRoaXMuY2xvc2VJY29uID0gdGhpcy5xdWVyeVNlbGVjdG9yKFwiLm5hdl9faWNvbi0tY2xvc2VcIik7XG4gICAgdGhpcy5zaG9wQnV0dG9uID0gdGhpcy5xdWVyeVNlbGVjdG9yKFwiLm5hdl9fbGluay0tU2hvcFwiKTtcbiAgICB0aGlzLmNsb3NlSWNvbkRlc2t0b3AgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIubmF2X19pY29uLS1jbG9zZS0tZGVza3RvcFwiKTtcbiAgICB0aGlzLmRlc2t0b3BXcmFwcGVyID0gdGhpcy5xdWVyeVNlbGVjdG9yKFwiLnNpZGViYXItbmF2LW92ZXJsYXktLWRlc2t0b3BcIik7XG4gICAgdGhpcy5saW5rcyA9IHRoaXMucXVlcnlTZWxlY3RvckFsbChcIi5qcy1zaWRlYmFyLW5hdl9fbGlua1wiKTtcbiAgICB0aGlzLmJhY2tCdXR0b25zID0gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgXCIuanMtc2Vjb25kYXJ5LW1lbnVfX3RvcC1iYXItLWJhY2tcIlxuICAgICk7XG4gICAgdGhpcy5jbG9zZUJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgXCIuanMtc2Vjb25kYXJ5LW1lbnVfX3RvcC1iYXItLWNsb3NlXCJcbiAgICApO1xuXG4gICAgdGhpcy5saW5rc0Rlc2t0b3AgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgXCIuanMtc2lkZWJhci1uYXYtZGVza3RvcF9fbGlua1wiXG4gICAgKTtcblxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMudG9nZ2xlSWNvbnNDbGFzc2VzID0gKCkgPT4ge1xuICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKFwiLnNpZGViYXItbmF2LXdyYXBwZXItLW1vYmlsZVwiKS5jbGFzc0xpc3QudG9nZ2xlKFxuICAgICAgICBcIm5hdi1hY3RpdmVcIlxuICAgICAgKTtcbiAgICAgIGNvbnN0IGljb25zID0gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKFwiLm5hdl9faWNvblwiKTtcbiAgICAgIGljb25zLmZvckVhY2goKGljb24pID0+IGljb24uY2xhc3NMaXN0LnRvZ2dsZShcIm5hdl9faWNvbi0tanMtaGlkZGVuXCIpKTtcbiAgICB9O1xuXG4gICAgdGhpcy5vcGVuTmF2ID0gKCkgPT4ge1xuICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKFwiI3NpZGViYXItbWVudS1kZXNrdG9wXCIpLnN0eWxlLmxlZnQgPSBcIjBcIjtcbiAgICAgIHRoaXMucXVlcnlTZWxlY3RvcihcIiNzaWRlYmFyLW5hdi1vdmVybGF5LS1kZXNrdG9wXCIpLnN0eWxlLmRpc3BsYXkgPVxuICAgICAgICBcImJsb2NrXCI7XG4gICAgfTtcblxuICAgIHRoaXMuY2xvc2VOYXYgPSAoKSA9PiB7XG4gICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIjc2lkZWJhci1tZW51LWRlc2t0b3BcIikuc3R5bGUubGVmdCA9IFwiLTEwMCVcIjtcbiAgICAgIHRoaXMucXVlcnlTZWxlY3RvcihcIiNzaWRlYmFyLW5hdi1vdmVybGF5LS1kZXNrdG9wXCIpLnN0eWxlLmRpc3BsYXkgPVxuICAgICAgICBcIm5vbmVcIjtcbiAgICAgIHRoaXMucXVlcnlTZWxlY3RvcihcIi5qcy1zaWRlYmFyLW5hdi13cmFwcGVyLS1kZXNrdG9wXCIpLmNsYXNzTGlzdC5yZW1vdmUoXG4gICAgICAgIFwibmF2LWFjdGl2ZVwiXG4gICAgICApO1xuICAgICAgdGhpcy5wcmV2TWVudS5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LnJlbW92ZShcbiAgICAgICAgXCJzZWNvbmRhcnktbWVudS1kZXNrdG9wLW9wZW5cIlxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgdGhpcy5idXJnZXJJY29uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLnRvZ2dsZUljb25zQ2xhc3NlcygpO1xuICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKFwiLm5hdl9faWNvbi0tY2xvc2VcIikuY2xhc3NMaXN0LnRvZ2dsZShcImNsb3NlLWFjdGl2ZVwiKTtcbiAgICB9KTtcblxuICAgIHRoaXMuY2xvc2VJY29uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLnRvZ2dsZUljb25zQ2xhc3NlcygpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5zaG9wQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLm9wZW5OYXYoKTtcbiAgICAgIHRoaXMucXVlcnlTZWxlY3RvcihcIi5qcy1zaWRlYmFyLW5hdi13cmFwcGVyLS1kZXNrdG9wXCIpLmNsYXNzTGlzdC50b2dnbGUoXG4gICAgICAgIFwibmF2LWFjdGl2ZVwiXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgdGhpcy5jbG9zZUljb25EZXNrdG9wLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLmNsb3NlTmF2KCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmRlc2t0b3BXcmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICB0aGlzLmNsb3NlTmF2KCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmxpbmtzLmZvckVhY2goKGxpbmspID0+XG4gICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgbGluay5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LnRvZ2dsZShcInNlY29uZGFyeS1tZW51LW9wZW5cIik7XG4gICAgICB9KVxuICAgICk7XG5cbiAgICB0aGlzLmJhY2tCdXR0b25zLmZvckVhY2goKGJhY2tCdXR0b24pID0+XG4gICAgICBiYWNrQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGRvY3VtZW50XG4gICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuc2Vjb25kYXJ5LW1lbnUtb3BlblwiKVxuICAgICAgICAgIC5jbGFzc0xpc3QudG9nZ2xlKFwic2Vjb25kYXJ5LW1lbnUtb3BlblwiKTtcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIHRoaXMuY2xvc2VCdXR0b25zLmZvckVhY2goKGNsb3NlQnV0dG9uKSA9PlxuICAgICAgY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLnRvZ2dsZUljb25zQ2xhc3NlcygpO1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgdGhpcy5saW5rc0Rlc2t0b3AuZm9yRWFjaCgobGlua0Rlc2t0b3ApID0+IHtcbiAgICAgIGxpbmtEZXNrdG9wLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKHRoaXMucHJldk1lbnUgIT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnByZXZNZW51Lm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QucmVtb3ZlKFxuICAgICAgICAgICAgXCJzZWNvbmRhcnktbWVudS1kZXNrdG9wLW9wZW5cIlxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5wcmV2TWVudSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgbGlua0Rlc2t0b3AubmV4dEVsZW1lbnRTaWJsaW5nLmNsYXNzTGlzdC5hZGQoXG4gICAgICAgICAgXCJzZWNvbmRhcnktbWVudS1kZXNrdG9wLW9wZW5cIlxuICAgICAgICApO1xuICAgICAgICB0aGlzLnByZXZNZW51ID0gbGlua0Rlc2t0b3A7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuYnVyZ2VySWNvbi5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy50b2dnbGVJY29uc0NsYXNzZXMpO1xuICAgIHRoaXMuY2xvc2VJY29uLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLnRvZ2dsZUljb25zQ2xhc3Nlcyk7XG4gICAgdGhpcy5zaG9wQnV0dG9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLm9wZW5OYXYpO1xuICAgIHRoaXMuY2xvc2VJY29uRGVza3RvcC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5jbG9zZU5hdik7XG4gICAgdGhpcy5kZXNrdG9wV3JhcHBlci5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5jbG9zZU5hdik7XG5cbiAgICB0aGlzLmxpbmtzLmZvckVhY2goKGxpbmspID0+XG4gICAgICBsaW5rLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgbGluay5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LnRvZ2dsZShcInNlY29uZGFyeS1tZW51LW9wZW5cIik7XG4gICAgICB9KVxuICAgICk7XG5cbiAgICB0aGlzLmJhY2tCdXR0b25zLmZvckVhY2goKGJhY2tCdXR0b24pID0+XG4gICAgICBiYWNrQnV0dG9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGRvY3VtZW50XG4gICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuc2Vjb25kYXJ5LW1lbnUtb3BlblwiKVxuICAgICAgICAgIC5jbGFzc0xpc3QudG9nZ2xlKFwic2Vjb25kYXJ5LW1lbnUtb3BlblwiKTtcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIHRoaXMuY2xvc2VCdXR0b25zLmZvckVhY2goKGNsb3NlQnV0dG9uKSA9PlxuICAgICAgY2xvc2VCdXR0b24ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLnRvZ2dsZUljb25zQ2xhc3NlcygpO1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgdGhpcy5saW5rc0Rlc2t0b3AuZm9yRWFjaCgobGlua0Rlc2t0b3ApID0+IHtcbiAgICAgIGxpbmtEZXNrdG9wLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKHRoaXMucHJldk1lbnUgIT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnByZXZNZW51Lm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QucmVtb3ZlKFxuICAgICAgICAgICAgXCJzZWNvbmRhcnktbWVudS1kZXNrdG9wLW9wZW5cIlxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5wcmV2TWVudSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgbGlua0Rlc2t0b3AubmV4dEVsZW1lbnRTaWJsaW5nLmNsYXNzTGlzdC5hZGQoXG4gICAgICAgICAgXCJzZWNvbmRhcnktbWVudS1kZXNrdG9wLW9wZW5cIlxuICAgICAgICApO1xuICAgICAgICB0aGlzLnByZXZNZW51ID0gbGlua0Rlc2t0b3A7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJzaWRlYmFyLXRvZ2dsZVwiLCBTaWRlYmFyVG9nZ2xlKTtcbiIsIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gY2xhc3MgU2lkZWJhclRvZ2dsZSBleHRlbmRzIEhUTUxFbGVtZW50IHtcbi8vICAgY29uc3RydWN0b3IoKSB7XG4vLyAgICAgc3VwZXIoKTtcblxuLy8gICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaWRlYmFyLXRvZ2dsZS10ZW1wbGF0ZVwiKTtcblxuLy8gICAgIGNvbnN0IGJ1cmdlckljb24gPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIubmF2X19pY29uLS1idXJnZXJcIik7XG4vLyAgICAgY29uc3QgY2xvc2VJY29uID0gdGhpcy5xdWVyeVNlbGVjdG9yKFwiLm5hdl9faWNvbi0tY2xvc2VcIik7XG4vLyAgICAgY29uc3Qgc2hvcEJ1dHRvbiA9IHRoaXMucXVlcnlTZWxlY3RvcihcIi5uYXZfX2xpbmstLVNob3BcIik7XG4vLyAgICAgY29uc3QgY2xvc2VJY29uRGVza3RvcCA9IHRoaXMucXVlcnlTZWxlY3RvcihcIi5uYXZfX2ljb24tLWNsb3NlLS1kZXNrdG9wXCIpO1xuLy8gICAgIGNvbnN0IGRlc2t0b3BXcmFwcGVyID0gdGhpcy5xdWVyeVNlbGVjdG9yKFwiLnNpZGViYXItbmF2LW92ZXJsYXktLWRlc2t0b3BcIik7XG4vLyAgICAgY29uc3QgbGlua3MgPSB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuanMtc2lkZWJhci1uYXZfX2xpbmtcIik7XG4vLyAgICAgY29uc3QgYmFja0J1dHRvbnMgPSB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoXG4vLyAgICAgICBcIi5qcy1zZWNvbmRhcnktbWVudV9fdG9wLWJhci0tYmFja1wiXG4vLyAgICAgKTtcbi8vICAgICBjb25zdCBjbG9zZUJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuLy8gICAgICAgXCIuanMtc2Vjb25kYXJ5LW1lbnVfX3RvcC1iYXItLWNsb3NlXCJcbi8vICAgICApO1xuXG4vLyAgICAgY29uc3QgdG9nZ2xlSWNvbnNDbGFzc2VzID0gKCkgPT4ge1xuLy8gICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKFwiLnNpZGViYXItbmF2LXdyYXBwZXItLW1vYmlsZVwiKS5jbGFzc0xpc3QudG9nZ2xlKFxuLy8gICAgICAgICBcIm5hdi1hY3RpdmVcIlxuLy8gICAgICAgKTtcbi8vICAgICAgIGNvbnN0IGljb25zID0gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKFwiLm5hdl9faWNvblwiKTtcbi8vICAgICAgIGljb25zLmZvckVhY2goKGljb24pID0+IGljb24uY2xhc3NMaXN0LnRvZ2dsZShcIm5hdl9faWNvbi0tanMtaGlkZGVuXCIpKTtcbi8vICAgICB9O1xuXG4vLyAgICAgY29uc3Qgb3Blbk5hdiA9ICgpID0+IHtcbi8vICAgICAgIHRoaXMucXVlcnlTZWxlY3RvcihcIiNzaWRlYmFyLW1lbnUtZGVza3RvcFwiKS5zdHlsZS5sZWZ0ID0gXCIwXCI7XG4vLyAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIjc2lkZWJhci1uYXYtb3ZlcmxheS0tZGVza3RvcFwiKS5zdHlsZS5kaXNwbGF5ID1cbi8vICAgICAgICAgXCJibG9ja1wiO1xuLy8gICAgIH07XG5cbi8vICAgICBjb25zdCBjbG9zZU5hdiA9ICgpID0+IHtcbi8vICAgICAgIHRoaXMucXVlcnlTZWxlY3RvcihcIiNzaWRlYmFyLW1lbnUtZGVza3RvcFwiKS5zdHlsZS5sZWZ0ID0gXCItMTAwJVwiO1xuLy8gICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKFwiI3NpZGViYXItbmF2LW92ZXJsYXktLWRlc2t0b3BcIikuc3R5bGUuZGlzcGxheSA9XG4vLyAgICAgICAgIFwibm9uZVwiO1xuLy8gICAgIH07XG5cbi8vICAgICBidXJnZXJJY29uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbi8vICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4vLyAgICAgICB0b2dnbGVJY29uc0NsYXNzZXMoKTtcbi8vICAgICAgIHRoaXMucXVlcnlTZWxlY3RvcihcIi5uYXZfX2ljb24tLWNsb3NlXCIpLmNsYXNzTGlzdC50b2dnbGUoXCJjbG9zZS1hY3RpdmVcIik7XG4vLyAgICAgfSk7XG5cbi8vICAgICBjbG9zZUljb24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuLy8gICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbi8vICAgICAgIHRvZ2dsZUljb25zQ2xhc3NlcygpO1xuLy8gICAgIH0pO1xuXG4vLyAgICAgc2hvcEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4vLyAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuLy8gICAgICAgb3Blbk5hdigpO1xuLy8gICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKFwiLnNpZGViYXItbmF2LXdyYXBwZXItLWRlc2t0b3BcIikuY2xhc3NMaXN0LnRvZ2dsZShcbi8vICAgICAgICAgXCJuYXYtYWN0aXZlXCJcbi8vICAgICAgICk7XG4vLyAgICAgfSk7XG5cbi8vICAgICBjbG9zZUljb25EZXNrdG9wLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbi8vICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4vLyAgICAgICBjbG9zZU5hdigpO1xuLy8gICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKFwiLnNpZGViYXItbmF2LXdyYXBwZXItLWRlc2t0b3BcIikuY2xhc3NMaXN0LnRvZ2dsZShcbi8vICAgICAgICAgXCJuYXYtYWN0aXZlXCJcbi8vICAgICAgICk7XG4vLyAgICAgfSk7XG5cbi8vICAgICBkZXNrdG9wV3JhcHBlci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuLy8gICAgICAgY2xvc2VOYXYoKTtcbi8vICAgICAgIHRoaXMucXVlcnlTZWxlY3RvcihcIi5zaWRlYmFyLW5hdi13cmFwcGVyLS1kZXNrdG9wXCIpLmNsYXNzTGlzdC5yZW1vdmUoXG4vLyAgICAgICAgIFwibmF2LWFjdGl2ZVwiXG4vLyAgICAgICApO1xuLy8gICAgIH0pO1xuXG4vLyAgICAgbGlua3MuZm9yRWFjaCgobGluaykgPT5cbi8vICAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuLy8gICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuLy8gICAgICAgICBsaW5rLm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QudG9nZ2xlKFwic2Vjb25kYXJ5LW1lbnUtb3BlblwiKTtcbi8vICAgICAgIH0pXG4vLyAgICAgKTtcblxuLy8gICAgIGJhY2tCdXR0b25zLmZvckVhY2goKGJhY2tCdXR0b24pID0+XG4vLyAgICAgICBiYWNrQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbi8vICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbi8vICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4vLyAgICAgICAgIGRvY3VtZW50XG4vLyAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuc2Vjb25kYXJ5LW1lbnUtb3BlblwiKVxuLy8gICAgICAgICAgIC5jbGFzc0xpc3QudG9nZ2xlKFwic2Vjb25kYXJ5LW1lbnUtb3BlblwiKTtcbi8vICAgICAgIH0pXG4vLyAgICAgKTtcblxuLy8gICAgIGNsb3NlQnV0dG9ucy5mb3JFYWNoKChjbG9zZUJ1dHRvbikgPT5cbi8vICAgICAgIGNsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbi8vICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbi8vICAgICAgICAgdG9nZ2xlSWNvbnNDbGFzc2VzKCk7XG4vLyAgICAgICB9KVxuLy8gICAgICk7XG4vLyAgIH1cbi8vIH1cblxuLy8gY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwic2lkZWJhci10b2dnbGVcIiwgU2lkZWJhclRvZ2dsZSk7XG5cbmNsYXNzIFNpZGViYXJUb2dnbGUgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIHByZXZNZW51ID0gbnVsbDtcblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLmJ1cmdlckljb24gPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIubmF2X19pY29uLS1idXJnZXJcIik7XG4gICAgdGhpcy5jbG9zZUljb24gPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIubmF2X19pY29uLS1jbG9zZVwiKTtcbiAgICB0aGlzLnNob3BCdXR0b24gPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIubmF2X19saW5rLS1TaG9wXCIpO1xuICAgIHRoaXMuY2xvc2VJY29uRGVza3RvcCA9IHRoaXMucXVlcnlTZWxlY3RvcihcIi5uYXZfX2ljb24tLWNsb3NlLS1kZXNrdG9wXCIpO1xuICAgIHRoaXMuZGVza3RvcFdyYXBwZXIgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIuc2lkZWJhci1uYXYtb3ZlcmxheS0tZGVza3RvcFwiKTtcbiAgICB0aGlzLmxpbmtzID0gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKFwiLmpzLXNpZGViYXItbmF2X19saW5rXCIpO1xuICAgIHRoaXMuYmFja0J1dHRvbnMgPSB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICBcIi5qcy1zZWNvbmRhcnktbWVudV9fdG9wLWJhci0tYmFja1wiXG4gICAgKTtcbiAgICB0aGlzLmNsb3NlQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICBcIi5qcy1zZWNvbmRhcnktbWVudV9fdG9wLWJhci0tY2xvc2VcIlxuICAgICk7XG5cbiAgICB0aGlzLmxpbmtzRGVza3RvcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICBcIi5qcy1zaWRlYmFyLW5hdi1kZXNrdG9wX19saW5rXCJcbiAgICApO1xuXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy50b2dnbGVJY29uc0NsYXNzZXMgPSAoKSA9PiB7XG4gICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIuc2lkZWJhci1uYXYtd3JhcHBlci0tbW9iaWxlXCIpLmNsYXNzTGlzdC50b2dnbGUoXG4gICAgICAgIFwibmF2LWFjdGl2ZVwiXG4gICAgICApO1xuICAgICAgY29uc3QgaWNvbnMgPSB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoXCIubmF2X19pY29uXCIpO1xuICAgICAgaWNvbnMuZm9yRWFjaCgoaWNvbikgPT4gaWNvbi5jbGFzc0xpc3QudG9nZ2xlKFwibmF2X19pY29uLS1qcy1oaWRkZW5cIikpO1xuICAgIH07XG5cbiAgICB0aGlzLm9wZW5OYXYgPSAoKSA9PiB7XG4gICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIjc2lkZWJhci1tZW51LWRlc2t0b3BcIikuc3R5bGUubGVmdCA9IFwiMFwiO1xuICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKFwiI3NpZGViYXItbmF2LW92ZXJsYXktLWRlc2t0b3BcIikuc3R5bGUuZGlzcGxheSA9XG4gICAgICAgIFwiYmxvY2tcIjtcbiAgICB9O1xuXG4gICAgdGhpcy5jbG9zZU5hdiA9ICgpID0+IHtcbiAgICAgIHRoaXMucXVlcnlTZWxlY3RvcihcIiNzaWRlYmFyLW1lbnUtZGVza3RvcFwiKS5zdHlsZS5sZWZ0ID0gXCItMTAwJVwiO1xuICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKFwiI3NpZGViYXItbmF2LW92ZXJsYXktLWRlc2t0b3BcIikuc3R5bGUuZGlzcGxheSA9XG4gICAgICAgIFwibm9uZVwiO1xuICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKFwiLmpzLXNpZGViYXItbmF2LXdyYXBwZXItLWRlc2t0b3BcIikuY2xhc3NMaXN0LnJlbW92ZShcbiAgICAgICAgXCJuYXYtYWN0aXZlXCJcbiAgICAgICk7XG4gICAgICB0aGlzLnByZXZNZW51Lm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QucmVtb3ZlKFxuICAgICAgICBcInNlY29uZGFyeS1tZW51LWRlc2t0b3Atb3BlblwiXG4gICAgICApO1xuICAgIH07XG5cbiAgICB0aGlzLmJ1cmdlckljb24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMudG9nZ2xlSWNvbnNDbGFzc2VzKCk7XG4gICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIubmF2X19pY29uLS1jbG9zZVwiKS5jbGFzc0xpc3QudG9nZ2xlKFwiY2xvc2UtYWN0aXZlXCIpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5jbG9zZUljb24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMudG9nZ2xlSWNvbnNDbGFzc2VzKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnNob3BCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMub3Blbk5hdigpO1xuICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKFwiLmpzLXNpZGViYXItbmF2LXdyYXBwZXItLWRlc2t0b3BcIikuY2xhc3NMaXN0LnRvZ2dsZShcbiAgICAgICAgXCJuYXYtYWN0aXZlXCJcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmNsb3NlSWNvbkRlc2t0b3AuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuY2xvc2VOYXYoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZGVza3RvcFdyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuY2xvc2VOYXYoKTtcbiAgICB9KTtcblxuICAgIHRoaXMubGlua3MuZm9yRWFjaCgobGluaykgPT5cbiAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBsaW5rLm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QudG9nZ2xlKFwic2Vjb25kYXJ5LW1lbnUtb3BlblwiKTtcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIHRoaXMuYmFja0J1dHRvbnMuZm9yRWFjaCgoYmFja0J1dHRvbikgPT5cbiAgICAgIGJhY2tCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZG9jdW1lbnRcbiAgICAgICAgICAucXVlcnlTZWxlY3RvcihcIi5zZWNvbmRhcnktbWVudS1vcGVuXCIpXG4gICAgICAgICAgLmNsYXNzTGlzdC50b2dnbGUoXCJzZWNvbmRhcnktbWVudS1vcGVuXCIpO1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgdGhpcy5jbG9zZUJ1dHRvbnMuZm9yRWFjaCgoY2xvc2VCdXR0b24pID0+XG4gICAgICBjbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMudG9nZ2xlSWNvbnNDbGFzc2VzKCk7XG4gICAgICB9KVxuICAgICk7XG5cbiAgICB0aGlzLmxpbmtzRGVza3RvcC5mb3JFYWNoKChsaW5rRGVza3RvcCkgPT4ge1xuICAgICAgbGlua0Rlc2t0b3AuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAodGhpcy5wcmV2TWVudSAhPT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMucHJldk1lbnUubmV4dEVsZW1lbnRTaWJsaW5nLmNsYXNzTGlzdC5yZW1vdmUoXG4gICAgICAgICAgICBcInNlY29uZGFyeS1tZW51LWRlc2t0b3Atb3BlblwiXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLnByZXZNZW51ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsaW5rRGVza3RvcC5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LmFkZChcbiAgICAgICAgICBcInNlY29uZGFyeS1tZW51LWRlc2t0b3Atb3BlblwiXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMucHJldk1lbnUgPSBsaW5rRGVza3RvcDtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5idXJnZXJJY29uLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLnRvZ2dsZUljb25zQ2xhc3Nlcyk7XG4gICAgdGhpcy5jbG9zZUljb24ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMudG9nZ2xlSWNvbnNDbGFzc2VzKTtcbiAgICB0aGlzLnNob3BCdXR0b24ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMub3Blbk5hdik7XG4gICAgdGhpcy5jbG9zZUljb25EZXNrdG9wLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmNsb3NlTmF2KTtcbiAgICB0aGlzLmRlc2t0b3BXcmFwcGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmNsb3NlTmF2KTtcblxuICAgIHRoaXMubGlua3MuZm9yRWFjaCgobGluaykgPT5cbiAgICAgIGxpbmsucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBsaW5rLm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QudG9nZ2xlKFwic2Vjb25kYXJ5LW1lbnUtb3BlblwiKTtcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIHRoaXMuYmFja0J1dHRvbnMuZm9yRWFjaCgoYmFja0J1dHRvbikgPT5cbiAgICAgIGJhY2tCdXR0b24ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZG9jdW1lbnRcbiAgICAgICAgICAucXVlcnlTZWxlY3RvcihcIi5zZWNvbmRhcnktbWVudS1vcGVuXCIpXG4gICAgICAgICAgLmNsYXNzTGlzdC50b2dnbGUoXCJzZWNvbmRhcnktbWVudS1vcGVuXCIpO1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgdGhpcy5jbG9zZUJ1dHRvbnMuZm9yRWFjaCgoY2xvc2VCdXR0b24pID0+XG4gICAgICBjbG9zZUJ1dHRvbi5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMudG9nZ2xlSWNvbnNDbGFzc2VzKCk7XG4gICAgICB9KVxuICAgICk7XG5cbiAgICB0aGlzLmxpbmtzRGVza3RvcC5mb3JFYWNoKChsaW5rRGVza3RvcCkgPT4ge1xuICAgICAgbGlua0Rlc2t0b3AucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAodGhpcy5wcmV2TWVudSAhPT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMucHJldk1lbnUubmV4dEVsZW1lbnRTaWJsaW5nLmNsYXNzTGlzdC5yZW1vdmUoXG4gICAgICAgICAgICBcInNlY29uZGFyeS1tZW51LWRlc2t0b3Atb3BlblwiXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLnByZXZNZW51ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsaW5rRGVza3RvcC5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LmFkZChcbiAgICAgICAgICBcInNlY29uZGFyeS1tZW51LWRlc2t0b3Atb3BlblwiXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMucHJldk1lbnUgPSBsaW5rRGVza3RvcDtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcInNpZGViYXItdG9nZ2xlXCIsIFNpZGViYXJUb2dnbGUpO1xuXG59LHt9XX0se30sWzFdKVxuXG4iXX0=
